'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Star = require('../elements/Star');

var _Star2 = _interopRequireDefault(_Star);

var _colors = require('../styles/colors');

var AVAILABLE_THEMES = _interopRequireWildcard(_colors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileoverview react-stars-rating
 * @author @lmuresan
 * @example
 * <StarsRating
 *   name={string} - name for form input
 *   rating={number} - a set rating between the rating amount (optional)
 *   insideForm={boolean} - is the rating inside a form to create the hidden input so it will submit the rating (optional)
 *   disabled={boolean} - is the rating disabled (optional)
 *   onRatingClick={function} - a handler function that gets called onClick of the rating (optional)
 *   theme={string} - name of the theme colors to e used
 * />
 */
var StarsRating = function (_Component) {
  _inherits(StarsRating, _Component);

  function StarsRating() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, StarsRating);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StarsRating.__proto__ || Object.getPrototypeOf(StarsRating)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      currentRating: null,
      stars: []
    }, _this.handleClickOnStar = function (starValue) {
      // generate the new stars
      _this.setupStars({
        disabled: _this.props.disabled,
        rating: starValue
      });

      // call the outside handler
      _this.props.onRatingClick(starValue);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  /**
   * Component state
   */


  _createClass(StarsRating, [{
    key: 'componentWillMount',


    /**
     * React lifecycle method - componentWillMount
     */
    value: function componentWillMount() {
      this.setupStars(this.props);
    }

    /**
     * React lifecycle method - componentWillReceiveProps
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setupStars(nextProps);
    }

    /**
     * Generate the array of stars
     */

  }, {
    key: 'setupStars',
    value: function setupStars(_ref2) {
      var disabled = _ref2.disabled,
          rating = _ref2.rating;

      var stars = [];

      for (var i = 0; i < 5; i++) {
        var star = {
          index: i,
          disabled: disabled,
          onClick: this.handleClickOnStar,
          checked: i + 1 <= rating
        };

        stars.push(star);
      }

      this.setState({
        currentRating: rating,
        stars: stars
      });
    }

    /**
     * Callback handler for the click event on a star
     */

  }, {
    key: 'renderStarsContianer',


    /**
     * Render the container where all the stars will be rendered
     * @returns {Object} JSX HTML markup
     */
    value: function renderStarsContianer() {
      var stars = this.state.stars;
      var theme = this.props.theme;

      var styles = {
        display: 'inline-block'
      };
      var currentTheme = theme;

      if (!AVAILABLE_THEMES[currentTheme]) {
        currentTheme = 'orange';
      }

      return _react2.default.createElement(
        'span',
        { className: 'lm-stars-rating__container', style: styles },
        stars.map(function (star, index) {
          return _react2.default.createElement(_Star2.default, _extends({ key: index, theme: currentTheme }, star));
        })
      );
    }

    /**
     * Render the hidden field use when the rating is inside a form. We use an input hidden to automatically submit the data with the other form values
     * @returns {Object | null} JSX HTML markup when the component is rendered inside a form or null
     */

  }, {
    key: 'renderRatingHiddenField',
    value: function renderRatingHiddenField() {
      var _props = this.props,
          insideForm = _props.insideForm,
          name = _props.name;
      var currentRating = this.state.currentRating;


      if (insideForm) {
        return _react2.default.createElement('input', { type: 'hidden', value: currentRating, name: name });
      }

      return null;
    }

    /**
     * React lifecycle method: render
     * @returns {Object} JSX HTML markup
     */

  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'span',
        { className: 'lm-stars-rating' },
        this.renderStarsContianer(),
        this.renderRatingHiddenField()
      );
    }
  }]);

  return StarsRating;
}(_react.Component);

StarsRating.defaultProps = {
  name: 'rating-' + Date.now(),
  disabled: false,
  insideForm: false,
  onRatingClick: function onRatingClick() {
    return false;
  },
  theme: 'orange'
};

StarsRating.propTypes = {
  name: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  insideForm: _propTypes2.default.bool,
  rating: _propTypes2.default.number.isRequired,
  onRatingClick: _propTypes2.default.func,
  theme: _propTypes2.default.string
};

exports.default = StarsRating;